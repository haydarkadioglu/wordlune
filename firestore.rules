rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Data Collection ---
    // This collection stores user-specific data like word lists.
    match /data/{userId}/{language}/{listId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /words/{wordId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Users Collection ---
    // Public user profiles, readable by anyone, writable only by the user.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      // Deny creation/deletion of user profiles via this rule.
      // Creation is handled by a Cloud Function or server-side logic.
      allow create, delete: if false;
    }

    // --- Usernames Collection ---
    // Ensures username uniqueness. Readable by anyone to check for existence.
    // Writable only through secure server-side logic (e.g., Cloud Function).
    match /usernames/{username} {
      allow read: if true;
      allow write: if false; // Should be handled by backend logic
    }
    
    // --- Admins Collection ---
    // Only allows reading for authenticated users to check their own admin status.
    match /admins/{userId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false; // Admin status should be set manually in Firestore console.
    }

    // --- Stories Collections ---

    // Rule for accessing a specific story document.
    match /stories/{language}/stories/{storyId} {
      // ANYONE can read a story IF it is published.
      allow read: if resource.data.isPublished == true || (request.auth != null && request.auth.uid == resource.data.authorId);
      
      // LOGGED-IN users can create stories.
      allow create: if request.auth != null;
      
      // ONLY the AUTHOR can update or delete their own story.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    // Rule for Collection Group queries on 'stories'
    // This allows a user to query across all languages to find stories they authored.
    match /{path=**}/stories/{storyId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
  }
}
