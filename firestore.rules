
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of a document by UID
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for user profile documents, containing non-public info.
    match /users/{userId} {
      // A user can only create their own profile document
      allow create: if isOwner(userId);
      
      // A user can only read their own profile
      allow read: if isOwner(userId);
      
      // A user can update their own profile, but cannot change immutable fields like UID.
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      
      // Users cannot delete their profile documents.
      allow delete: if false;
    }

    // Rules for the public, unique username mapping.
    match /usernames/{username} {
      // Anyone can read a username document to check for existence.
      allow read: if true;
      
      // A user can create a username mapping document only if it points to their own UID.
      // This prevents a user from claiming a username for someone else.
      allow create: if isOwner(request.resource.data.userId);
      
      // A user can delete their *own* username mapping document.
      // This rule checks the existing document on the server to verify ownership.
      allow delete: if isOwner(resource.data.userId);
      
      // Username documents cannot be updated in-place; they must be deleted and re-created in a transaction.
      allow update: if false;
    }

    // Rules for all other user-specific application data (words, lists, etc.).
    match /data/{userId}/{document=**} {
       // A user can perform any action (read, write) only within their own data path.
      allow read, write: if isOwner(userId);
    }
  }
}
