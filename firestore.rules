rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- User Data: Lists and Words ---
    // Users can only access their own data container.
    match /data/{userId} {
      allow read, write: if request.auth.uid == userId;
      
      // A user can manage lists (create, update, delete) under their own data document.
      match /{language}/{listId} {
        allow read, write: if request.auth.uid == userId;

        // A user can manage words within their own lists.
        match /words/{wordId} {
          allow read, write: if request.auth.uid == userId;
        }
      }
    }

    // --- User Management: Public usernames and private profiles ---
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == userId;
    }
    match /usernames/{username} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid != null;
      allow delete, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }
    
    // --- Stories: Public and author-specific collections ---

    // Public stories collection (accessible by anyone for reading published content)
    match /stories/{language}/stories/{storyId} {
      allow read: if resource.data.isPublished == true || request.auth.uid == resource.data.authorId;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid == resource.data.authorId;
      // Deletion is implicitly handled by the user deleting their own copy from stories_by_author.
      // The client-side batch write will fail if the stories_by_author deletion fails.
      allow delete: if request.auth.uid == get(/databases/$(database)/documents/stories/$(language)/stories/$(storyId)).data.authorId;
    }
    
    // Author-specific stories collection (only accessible by the author)
    match /stories_by_author/{authorId}/stories/{storyId} {
      allow read, create, update: if request.auth.uid == authorId;
      // This rule is reliable because it uses the wildcard {authorId} from the path.
      allow delete: if request.auth.uid == authorId;
    }
    
    // Rule for CollectionGroup queries on "stories"
    match /{path=**}/stories/{storyId} {
      allow read: if request.auth.uid == resource.data.authorId;
    }

    // --- Admin and Moderation ---
    match /admins/{userId} {
        allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists == true;
    }
    
    match /user_bans/{userId} {
      allow read: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists == true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists == true;
    }
  }
}
