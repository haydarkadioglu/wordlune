
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of the data
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for user-specific data (words, lists, etc.)
    // Stored under /data/{userId}
    match /data/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // Rules for public user profiles
    // Contains non-sensitive info like username, displayName
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if request.auth != null;
      // A user can create their own profile and update their own username/displayName
      allow create, update: if isOwner(userId);
    }
    
    // Rules for ensuring unique usernames. This is the most complex part.
    // The key is to allow a user to delete their old username doc
    // and create a new one, but only within the context of updating their profile.
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow read: if request.auth != null;

      // Allow creating a username doc IF the user is creating their own user profile
      // This is for initial registration.
      allow create: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      request.resource.data.userId == request.auth.uid;
      
      // Allow deleting an old username doc IF the user is also updating their main user profile.
      // This is crucial for the username change transaction to succeed.
      allow delete: if request.auth != null &&
                      // Check that the user is the owner of the username being deleted
                      resource.data.userId == request.auth.uid;
    }
    
    // Rules for Admin-only functionality
    match /admins/{userId} {
      // Only authenticated users can check if a user is an admin
      // This prevents anonymous enumeration of admins.
      allow read: if request.auth != null;
      // No one can write/delete from the client. This should be managed from the Firebase Console.
      allow write: if false;
    }
    
    // Rules for Stories
    match /stories/{storyId} {
        // Anyone logged in can read stories
        allow read: if request.auth != null;
        // Only admins can create, update, or delete stories
        allow write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Rules for dynamic configuration like the Android app link
    match /versions/{versionId} {
      // Everyone can read configuration data
      allow read: if true;
      // No one can write from the client. Manage from Firebase Console.
      allow write: if false;
    }
  }
}
