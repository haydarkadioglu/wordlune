
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Data Rules ---
    // Users can only access their own data container.
    match /data/{userId} {
      allow read, write: if request.auth.uid == userId;

      // Any user can read/write their own lists and words.
      match /{language}/{listId}/{document=**} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // --- Public User Profiles ---
    // Anyone can read a user's public profile.
    // Only the user can create or update their own profile.
    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth.uid == userId;
    }

    // --- Username Uniqueness ---
    // Anyone can read a username to check for existence.
    // A user can only create a username document linked to their own UID.
    // A user can only delete their own old username document (as part of a transaction).
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth.uid == get(/databases/$(database)/documents/usernames/$(username)).data.userId;
    }
    
    // --- Admin Rules ---
    // This rule is simple: if a user's UID is in the 'admins' collection, they are an admin.
    // Admins can read any document in the database. This rule is broad and should be used with caution.
    // For write access, specific rules per collection are still required.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Story Rules ---
    // Public stories collection.
    match /stories/{language}/stories/{storyId} {
      // Anyone can read a published story.
      allow read: if resource.data.isPublished == true || (request.auth.uid != null && request.auth.uid == resource.data.authorId);

      // Logged-in users can create stories.
      allow create: if request.auth.uid != null;

      // Users can only update their own stories.
      allow update: if request.auth.uid == resource.data.authorId;

      // An admin can delete any story. A user can delete their own story.
      allow delete: if isAdmin() || (request.auth.uid != null && get(/databases/$(database)/documents/stories/$(language)/stories/$(storyId)).data.authorId == request.auth.uid);
    }
    
    // --- Collection Group Rules for Stories ---
    // This allows a user to query across all languages to find their own stories for the profile page.
    match /{path=**}/stories/{storyId} {
       allow read: if request.auth.uid != null && get(/databases/$(database)/documents/$(path)/stories/$(storyId)).data.authorId == request.auth.uid;
    }
  }
}
