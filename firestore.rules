
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

<<<<<<< HEAD
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Matches any document in the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read a user's public profile (username, displayname)
      allow read: if request.auth != null;
      // A user can only create their own user document
      allow create: if request.auth.uid == userId;
      // A user can only update their own user document
      allow update: if request.auth.uid == userId;
      // Users cannot delete their profiles
      allow delete: if false;

      // Login history is private and can only be written by the user
      match /loginHistory/{logId} {
        allow read, delete: if false; // Nobody can read or delete logs
        allow create: if request.auth.uid == userId;
      }
    }

    // Matches any document in the 'usernames' collection
    // This collection maps a unique username to a userId
    match /usernames/{username} {
       // Any authenticated user can check if a username exists
      allow read: if request.auth != null;
      // A user can claim a username if it's not taken and they are creating it for themselves
      allow create: if request.auth.uid == request.resource.data.userId;
      // No direct updates allowed to a username document
      allow update: if false;
      // A user can delete their *own* username mapping (e.g., when changing their username)
      allow delete: if request.auth.uid == resource.data.userId;
    }

    // Matches the user-specific data container
    match /data/{userId} {
      // Allow read/write access only to the user who owns this data
      allow read, write: if request.auth.uid == userId;

      // This rule will apply to all subcollections within a user's data document
      // (e.g., 'words', 'lists')
      match /{subcollection}/{docId=**} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Matches the language documents in the 'stories' collection
    match /stories/{language} {
      // Anyone can read the language document itself (if it contains metadata)
=======
    // Helper function to check if a user is the owner of a document by UID
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for user profile documents, containing non-public info.
    match /users/{userId} {
      // A user can only create their own profile document
      allow create: if isOwner(userId);
      
      // A user can only read their own profile
      allow read: if isOwner(userId);
      
      // A user can update their own profile, but cannot change immutable fields like UID.
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      
      // Users cannot delete their profile documents.
      allow delete: if false;
    }

     // --- Usernames: Publicly readable, but creation and deletion are restricted ---
    match /usernames/{username} {
      // Anyone can read to check if a username exists.
      allow read;
      // A user can only create a username entry that maps to their own userId.
      allow create, update: if request.auth.uid == request.resource.data.userId;
      // A user can only delete their own username entry.
      // `resource.data` refers to the document state *before* the operation.
      allow delete: if request.auth.uid == resource.data.userId;
    }

    // Rules for all other user-specific application data (words, lists, etc.).
    match /data/{userId}/{document=**} {
       // A user can perform any action (read, write) only within their own data path.
      allow read, write: if isOwner(userId);
    }
    
    // ADMINS: Only authenticated users can read to check admin status.
    // WRITE: No one can write to this collection from the client-side.
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if false;
    }
    
    // STORIES: Publicly readable stories.
    // READ: Anyone can read stories.
    // WRITE: Only admins can write (create, update, delete) stories.
    match /stories/{storyId} {
>>>>>>> 2fb7b24f193876ca2e418d16c709a791b34f21a2
      allow read: if true;
      // Only admins can write to the language document
      allow write: if isAdmin();

      // Matches any story within the subcollection of a language
      match /stories/{storyId} {
        // Any user can read stories
        allow read: if true;
        // Only admins can create, update, or delete stories
        allow write: if isAdmin();
      }
    }
    
    // Matches admin documents. Only admins can read this collection.
    // This is useful for backend checks, but clients should generally not read it.
    match /admins/{userId} {
      allow read, write, create, delete: if false; // Nobody can modify admin list from client
    }
<<<<<<< HEAD

    // Matches version documents
    match /versions/{versionId} {
        // Anyone can read version information (like app links)
        allow read: if true;
        // Only admins can update version information
        allow write: if isAdmin();
=======
    
    // Versions: Contains app version info and download links.
    // READ: Anyone can read this data.
    // WRITE: No one can write to this collection from the client-side.
    match /versions/{docId} {
      allow read: if true;
      allow write: if false;
>>>>>>> 2fb7b24f193876ca2e418d16c709a791b34f21a2
    }
  }
}
