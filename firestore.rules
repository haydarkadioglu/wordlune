rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User data collections (private, only accessible by the owner)
    match /data/{userId}/{language}/{listId} {
      allow read, write: if request.auth.uid == userId;

      match /words/{wordId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Public stories collection
    match /stories/{language}/stories/{storyId} {
      // Anyone can read a story if it's published
      allow read: if resource.data.isPublished == true;

      // Logged-in users can create stories
      allow create: if request.auth.uid != null;

      // Only the author or an admin can update or delete a story
      allow update, delete: if request.auth.uid == resource.data.authorId || isAdmin();
    }
    
    // User-specific stories (for profile page)
    match /stories_by_author/{userId}/stories/{storyId} {
       // Only the owner can read, write, update, or delete their own stories
       allow read, write, update, delete: if request.auth.uid == userId;
    }

    // Admins collection (read-only for client)
    match /admins/{userId} {
      allow get: if request.auth.uid != null; // Allow logged-in users to check if they are admins.
      allow list, create, update, delete: if false; // Deny all other operations from the client.
    }
    
    // Public user profiles (read-only)
    match /users/{userId} {
      allow get: if true; // Allow anyone to read a user's public profile
      allow write: if request.auth.uid == userId; // Allow users to update their own profile
    }

    // Public usernames (read-only)
    match /usernames/{username} {
      allow get: if true; // Allow anyone to check if a username exists
      allow write: if request.auth.uid != null; // Allow logged-in users to create/update usernames
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Collection group query for stories by author
    match /{path=**}/stories/{storyId} {
      allow list: if request.auth.uid == request.query.where.value;
    }
  }
}
