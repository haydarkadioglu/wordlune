rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Rules for user-specific data (words, lists, etc.)
    match /data/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for user profile information
    match /users/{userId} {
      // Users can read their own profile
      allow get: if request.auth != null && request.auth.uid == userId;
      // Users can create their profile upon registration
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can update their own username
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for ensuring unique usernames
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow get;
      // A user can claim a username if they are logged in
      allow create: if request.auth != null;
      // A user can only delete their own username document
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Rules for stories, organized by language
    // Any authenticated user can read stories
    match /stories/{language}/stories/{storyId} {
      allow get: if request.auth != null;
      // Only admins can create, update, or delete stories
      allow write: if request.auth != null && isAdmin();
    }
    
    // Rules for admin user checks
    match /admins/{userId} {
      // Only an admin can check if another user is an admin.
      // A user can check their own admin status.
      allow get: if request.auth != null && (isAdmin() || request.auth.uid == userId);
    }
    
    // Rules for app version links (e.g., Android app link)
    // Anyone can read this information
    match /versions/{versionId} {
        allow get;
        // Only admins can update version links
        allow write: if request.auth != null && isAdmin();
    }
  }
}
