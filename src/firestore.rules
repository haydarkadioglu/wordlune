
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- USER DATA ---
    // Users can only read/write their own data.
    // The path contains the user's ID, which we match against their auth token.
    match /data/{userId}/{language}/{document=**} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // --- USER PROFILES & USERNAMES ---
    // Publicly readable, but only the user can create/update their own profile.
    match /users/{userId} {
      allow read;
      allow create, update: if request.auth.uid == userId;
    }
    
    // Usernames must be unique. Only the user can create their own username mapping.
    // Deletion/update is handled transactionally by a cloud function or backend service.
    match /usernames/{username} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth.uid == get(/databases/$(database)/documents/usernames/$(username)).data.userId;
    }

    // Login history is write-only for the user.
    match /users/{userId}/loginHistory/{logId} {
      allow create: if request.auth.uid == userId;
    }

    // --- STORY DATA ---
    // Public stories collection.
    match /stories/{language}/stories/{storyId} {
        // Anyone can read a story if it's published.
        // The author can always read their own story, even if it's a draft.
        allow read: if resource.data.isPublished == true || request.auth.uid == resource.data.authorId;
        
        // Users can create stories.
        allow create: if request.auth.uid != null && request.resource.data.authorId == request.auth.uid;
        
        // Only the author can update their story.
        allow update: if request.auth.uid == resource.data.authorId;
        
        // Only the author can delete their own story by verifying against the document being deleted.
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/stories/$(language)/stories/$(storyId)).data.authorId;
    }

    // Collection group for querying stories across all languages.
    match /{path=**}/stories/{storyId} {
        // A user can query the group to find stories they have authored.
        allow read: if request.auth.uid == resource.data.authorId;
    }
    
    // --- ADMIN & MODERATION ---
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Admins have full access to story collections for management.
    match /stories/{language}/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin list is read-only for admins themselves, to verify status.
    match /admins/{adminId} {
      allow read: if isAdmin() && request.auth.uid == adminId;
    }
    
    // User ban information is only accessible by admins.
    match /user_bans/{userId} {
      allow read, write: if isAdmin();
    }
  }
}
