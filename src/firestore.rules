rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Data: Lists & Words ---
    // Users can only access their own data container.
    match /data/{userId}/{document=**} {
      allow read, write: if request.auth.uid == userId;
    }

    // --- User Profiles & Usernames ---
    // Anyone can read a user's public profile, but only the user can create/update it.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }
    // Usernames must be unique. Anyone can read, but only authenticated users can create.
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // --- Admin Collection ---
    // Only authenticated users can attempt to read (rules will deny non-admins).
    match /admins/{adminId} {
        allow get: if request.auth.uid != null;
    }

    // --- User Ban Collection ---
    // Only authenticated users can check their own ban status.
    match /user_bans/{userId} {
        allow get: if request.auth.uid == userId;
        // Write access should be restricted to admin functions/backend.
        allow write: if false; 
    }

    // --- Stories (Public Collection) ---
    match /stories/{language}/stories/{storyId} {
      // Anyone can read a published story.
      allow get: if resource.data.isPublished == true;
      // Admins can read any story (published or not).
      allow list: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).exists();
      
      // Only authenticated users can create stories.
      allow create: if request.auth.uid != null;
      // Only the author can update their story.
      allow update: if request.auth.uid == request.resource.data.authorId;
      // Only the author can delete their story.
      allow delete: if request.auth.uid == get(/databases/$(database)/documents/stories/$(language)/stories/$(storyId)).data.authorId;
    }

    // --- Stories by Author (Private User Collection) ---
    match /stories_by_author/{authorId}/stories/{storyId} {
        // A user can read, write, update, and delete stories ONLY in their own author collection.
        allow read, create, update: if request.auth.uid == authorId;
        allow delete: if request.auth.uid == authorId;
    }

    // --- Collection Group Queries ---
    match /{path=**}/stories/{storyId} {
      // Allow a user to query the 'stories' collection group to find all stories they have authored.
      // This is used for the "My Profile" page.
      allow read: if request.auth.uid != null && resource.data.authorId == request.auth.uid;
    }
  }
}
