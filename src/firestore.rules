rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Usernames (Public) ---
    // Usernames must be unique. Only the user can create their own username mapping. Cannot be deleted or updated easily to prevent takeover.
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // --- User Profiles (Private) ---
    // Users can only read and update their own profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }
    
    // --- Login History (Private Subcollection) ---
    match /users/{userId}/loginHistory/{logId} {
      allow create: if request.auth.uid == userId;
    }

    // --- User Data (Private) ---
    // This is the root for user-specific data like word lists.
    // Users can manage their own data container.
    match /data/{userId} {
      allow read, write: if request.auth.uid == userId;

      // Lists within the user's data
      match /{language}/{listId} {
        allow read, write: if request.auth.uid == userId;
        
        // Words within a specific list
        match /words/{wordId} {
            allow read, write: if request.auth.uid == userId;
        }
      }
    }

    // --- PUBLIC STORIES ---
    match /stories/{language}/stories/{storyId} {
      allow read: if resource.data.isPublished == true || (request.auth != null && request.auth.uid == resource.data.authorId);
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
      // Allow delete if the user is the author of the story being deleted.
      // We must use get() because in a batch delete, resource is not available.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/stories/$(language)/stories/$(storyId)).data.authorId == request.auth.uid;
    }

    // --- STORIES BY AUTHOR (for user profile page) ---
    match /stories_by_author/{authorId}/stories/{storyId} {
        allow read, create, update: if request.auth != null && request.auth.uid == authorId;
        // Allow delete if the user ID in the path matches the authenticated user. This is secure and reliable.
        allow delete: if request.auth != null && request.auth.uid == authorId;
    }
    
    // --- Collection Group Queries ---
    match /{path=**}/stories/{storyId} {
        // Allow a user to perform a collection group query to find all stories they have authored.
        allow read: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
    
     // --- Admins (Admin-only access) ---
    match /admins/{userId} {
      allow read: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- User Bans (Admin-only access) ---
    match /user_bans/{userId} {
        allow read, write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // --- Versions (Public read, Admin write) ---
    match /versions/{docId} {
      allow read;
      allow write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}
