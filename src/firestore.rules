
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // --- Public read, restricted write collections ---

    // Public user information (username -> uid mapping)
    match /usernames/{username} {
      allow read: if true;
      // Allow create only during user registration (handled by backend logic)
      // Allow update/delete only through our transactional `updateUsername` function
      allow write: if request.auth != null;
    }
    
    // Admins list
    match /admins/{userId} {
      allow read: if request.auth != null; // Only authenticated users can check admin status
      allow write: if false; // Managed manually in console
    }
    
    // App versions or public config
    match /versions/{docId} {
        allow read: if true;
        allow write: if false; // Managed manually in console
    }
    
    // --- User-specific private data ---

    // User's own profile information
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // User's private login history
    match /users/{userId}/loginHistory/{logId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    
    // User's private data container (lists, words etc.)
    match /data/{userId}/{document=**} {
      allow read, write: if request.auth.uid == userId;
    }

    // --- Stories ---
    
    // Helper function to check if a user is banned
    function isBanned(userId) {
      let banDoc = get(/databases/$(database)/documents/user_bans/$(userId)).data;
      if (banDoc == null) {
        return false; // Not banned
      }
      if (banDoc.isPermanent == true) {
        return true; // Permanently banned
      }
      if (banDoc.bannedUntil != null && banDoc.bannedUntil > request.time) {
        return true; // Temporarily banned
      }
      return false; // Ban expired
    }

    // Public stories, grouped by language
    match /stories/{language}/stories/{storyId} {
      allow read: if resource.data.isPublished == true || (request.auth != null && request.auth.uid == resource.data.authorId);
      allow create: if request.auth != null && !isBanned(request.auth.uid);
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId && !isBanned(request.auth.uid);
    }
    
    // User's private index of their own stories
    match /stories_by_author/{userId}/stories/{storyId} {
        allow read, write: if request.auth != null && request.auth.uid == userId && !isBanned(userId);
    }
    
    // --- Moderation ---
    
    // User ban records
    match /user_bans/{userId} {
        // Only admins should be able to read or write ban records.
        // This relies on a custom claim or an 'admins' collection check.
        // Assuming an 'admins' collection for this rule.
        allow read, write: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}
